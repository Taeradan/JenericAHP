/* Copyright 2009 Yves Dubromelle, Thamer Louati @ LSIS(www.lsis.org)
 * 
 * This file is part of GenericANP.
 * 
 * GenericANP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GenericANP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GenericANP.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.taeradan.ahp.gui;

import org.taeradan.ahp.Criteria;
import org.taeradan.ahp.Root;
import Jama.Matrix;
import org.nfunk.jep.JEP;

/**
 * Dialog used to configure a Criteria's informations and preference matrix
 * @author Yves Dubromelle
 */
public class CriteriaDialog extends javax.swing.JDialog {
	private Criteria criteria;
        private Root root;
	private PrefMatrixTableModel guiPrefMatrix;
        private DepMatrixTableModel guiDepMatrix;
        
    /** Creates new form CriteriaDialog */
    public CriteriaDialog(java.awt.Frame parent, boolean modal,Criteria criteria, Root root) {
        super(parent, modal);
	this.criteria = criteria;
        this.root = root;
	guiPrefMatrix = new PrefMatrixTableModel();
        guiDepMatrix = new  DepMatrixTableModel();
	initTable();
        initTable1();
        initComponents();
	guiPrefMatrix.addTableModelListener( new PrefMatrixChangeListener());
        guiDepMatrix.addTableModelListener( new DepMatrixChangeListener());
	jTextFieldId.setText(criteria.getId());
	jTextFieldName.setText(criteria.getName());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelId = new javax.swing.JLabel();
        jLabelName = new javax.swing.JLabel();
        jTextFieldId = new javax.swing.JTextField();
        jTextFieldName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePrefMatrix = new javax.swing.JTable();
        jButtonReload = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableDepMatrix = new javax.swing.JTable();
        jLabelId1 = new javax.swing.JLabel();
        jLabelId2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Criteria properties");
        setResizable(false);

        jLabelId.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabelId.setText("ID");

        jLabelName.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabelName.setText("Name");

        jTablePrefMatrix.setModel(guiPrefMatrix);
        jTablePrefMatrix.setRowHeight(22);
        jScrollPane1.setViewportView(jTablePrefMatrix);

        jButtonReload.setText("Reload");
        jButtonReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReloadActionPerformed(evt);
            }
        });

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jTableDepMatrix.setModel(guiDepMatrix);
        jScrollPane2.setViewportView(jTableDepMatrix);

        jLabelId1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabelId1.setText("Matrice de preférence des indicateurs:");

        jLabelId2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabelId2.setText("Matrice d'interdépendance des critères en respectant ce critère:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelName)
                                    .addComponent(jLabelId))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextFieldName, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                                    .addComponent(jTextFieldId, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)))
                            .addComponent(jLabelId1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelId2))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonReload)
                        .addGap(14, 14, 14))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelId)
                    .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelName)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelId1)
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jLabelId2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSave)
                    .addComponent(jButtonReload))
                .addGap(50, 50, 50))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void jButtonReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReloadActionPerformed
		initTable();
		jTextFieldId.setText(criteria.getId());
		jTextFieldName.setText(criteria.getName());
	}//GEN-LAST:event_jButtonReloadActionPerformed

	private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
		criteria.setId(jTextFieldId.getText());
		criteria.setName(jTextFieldName.getText());
		Matrix matrix = new Matrix(guiPrefMatrix.getRowCount(), guiPrefMatrix.getColumnCount());
		System.out.println(guiPrefMatrix.getValueAt(1, 1).getClass());
		for(int i=0; i<guiPrefMatrix.getRowCount(); i++){
			for(int j=0; j<guiPrefMatrix.getColumnCount(); j++){
				double value = 0;
				if(guiPrefMatrix.getValueAt(i, j) instanceof Double)
					value = (Double)guiPrefMatrix.getValueAt(i, j);
				if(guiPrefMatrix.getValueAt(i, j) instanceof String){
					JEP myParser = new JEP();
					myParser.parseExpression((String)guiPrefMatrix.getValueAt(i, j));
					value = myParser.getValue();
				}
				matrix.set(i, j, value);
			}
		}
		criteria.getMatrixInd().setMatrix(matrix);
		this.dispose();
	}//GEN-LAST:event_jButtonSaveActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CriteriaDialog dialog = new CriteriaDialog(new javax.swing.JFrame(), true,null, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonReload;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JLabel jLabelId;
    private javax.swing.JLabel jLabelId1;
    private javax.swing.JLabel jLabelId2;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableDepMatrix;
    private javax.swing.JTable jTablePrefMatrix;
    private javax.swing.JTextField jTextFieldId;
    private javax.swing.JTextField jTextFieldName;
    // End of variables declaration//GEN-END:variables

		private void initTable(){
			int matrixSize = criteria.getIndicators().size();
			String[] columnNames = new String[matrixSize];
			Double[][] data = new Double[matrixSize][matrixSize];
			for(int i=0; i<matrixSize; i++){
				columnNames[i] = criteria.getIndicators().get(i).getId();
				for(int j=0; j<matrixSize; j++){
					data[i][j] = criteria.getMatrixInd().getMatrix().get(i, j);
				}
			}
			guiPrefMatrix.setDataVector(data, columnNames);
		}
                
                private void initTable1(){
			int matrixSize = root.getCriterias().size();
			String[] columnNames = new String[matrixSize];
			Double[][] data = new Double[matrixSize][matrixSize];
			for(int i=0; i<matrixSize; i++){
				columnNames[i] = root.getCriterias().get(i).getId();
				for(int j=0; j<matrixSize; j++){
					data[i][j] = criteria.getMatrixCr().getMatrix().get(i, j);
				}
			}
			guiDepMatrix.setDataVector(data, columnNames);
		}
	public void reloadCell(int row, int column){
		guiPrefMatrix.setValueAt(criteria.getMatrixInd().getMatrix().get(row, column), row, column);
                guiDepMatrix.setValueAt(criteria.getMatrixCr().getMatrix().get(row, column), row, column);	
        }

	public PrefMatrixTableModel getGuiPrefMatrix() {
		return guiPrefMatrix;
	}

        public DepMatrixTableModel getGuiDepMatrix() {
		return guiDepMatrix;
	}
}
