/* Copyright 2009 Yves Dubromelle, Thamer Louati @ LSIS(www.lsis.org)
 * 
 * This file is part of GenericANP.
 * 
 * GenericANP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GenericANP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GenericANP.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.taeradan.ahp.gui;

import org.taeradan.ahp.Root;
import Jama.Matrix;
import org.nfunk.jep.JEP;

/**
 * Dialog used to configure Root's informations and preference matrix
 * @author Yves Dubromelle
 */
public class RootDialog extends javax.swing.JDialog {
	private Root root;
	private PrefMatrixTableModel guiPrefMatrix;
	private PrefMatrixTableModel guiSuperMatrix;

	/** Creates new form CriteriaDialog */
	public RootDialog(java.awt.Frame parent, boolean modal, Root root) {
		super(parent, modal);
		this.root = root;
		guiPrefMatrix = new PrefMatrixTableModel();
		guiSuperMatrix = new PrefMatrixTableModel();
		initTable();
		initTable1();
		initComponents();
		guiPrefMatrix.addTableModelListener(new PrefMatrixChangeListener());
		guiSuperMatrix.addTableModelListener(new PrefMatrixChangeListener());
		jTextFieldObjective.setText(root.getName());
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelObjective = new javax.swing.JLabel();
        jTextFieldObjective = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePrefMatrix = new javax.swing.JTable();
        jButtonReload = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jLabelObjective1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableSuperMatrix = new javax.swing.JTable();
        jLabelObjective2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Criteria properties");
        setResizable(false);

        jLabelObjective.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabelObjective.setText("Global objective :");

        jTablePrefMatrix.setModel(guiPrefMatrix);
        jTablePrefMatrix.setRowHeight(22);
        jScrollPane1.setViewportView(jTablePrefMatrix);

        jButtonReload.setText("Reload");
        jButtonReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReloadActionPerformed(evt);
            }
        });

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jLabelObjective1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabelObjective1.setText("The Supermatrix of the ANP method :");

        jTableSuperMatrix.setModel(guiSuperMatrix);
        jScrollPane2.setViewportView(jTableSuperMatrix);

        jLabelObjective2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabelObjective2.setText("Preference matrix of criterias :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 936, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabelObjective)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldObjective, javax.swing.GroupLayout.DEFAULT_SIZE, 827, Short.MAX_VALUE))
                            .addComponent(jLabelObjective2, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelObjective1)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(804, Short.MAX_VALUE)
                .addComponent(jButtonSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonReload)
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelObjective)
                    .addComponent(jTextFieldObjective, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabelObjective2)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabelObjective1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSave)
                    .addComponent(jButtonReload))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void jButtonReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReloadActionPerformed
		initTable();
		jTextFieldObjective.setText(root.getName());
	}//GEN-LAST:event_jButtonReloadActionPerformed

	private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
		root.setName(jTextFieldObjective.getText());
		Matrix matrix = new Matrix(guiPrefMatrix.getRowCount(), guiPrefMatrix.getColumnCount());
		for(int i = 0; i < guiPrefMatrix.getRowCount(); i++) {
			for(int j = 0; j < guiPrefMatrix.getColumnCount(); j++) {
				double value = 0;
				if(guiPrefMatrix.getValueAt(i, j) instanceof Double) {
					value = (Double) guiPrefMatrix.getValueAt(i, j);
				}
				if(guiPrefMatrix.getValueAt(i, j) instanceof String) {
					JEP myParser = new JEP();
					myParser.parseExpression((String) guiPrefMatrix.getValueAt(i, j));
					value = myParser.getValue();
				}
				matrix.set(i, j, value);
			}
		}
		root.getMatrixCrCr().setMatrix(matrix);
		this.dispose();
	}//GEN-LAST:event_jButtonSaveActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				RootDialog dialog = new RootDialog(new javax.swing.JFrame(), true, null);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonReload;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JLabel jLabelObjective;
    private javax.swing.JLabel jLabelObjective1;
    private javax.swing.JLabel jLabelObjective2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTablePrefMatrix;
    private javax.swing.JTable jTableSuperMatrix;
    private javax.swing.JTextField jTextFieldObjective;
    // End of variables declaration//GEN-END:variables

	private void initTable() {
		int matrixSize = root.getCriterias().size();
		String[] columnNames = new String[matrixSize];
		Double[][] data = new Double[matrixSize][matrixSize];
		for(int i = 0; i < matrixSize; i++) {
			columnNames[i] = root.getCriterias().get(i).getId();
			for(int j = 0; j < matrixSize; j++) {
				data[i][j] = root.getMatrixCrCr().getMatrix().get(i, j);
			}
		}
		guiPrefMatrix.setDataVector(data, columnNames);
	}

	private void initTable1() {
		int matrixSize = root.getsizesupermatrix();
		String[] columnNames = new String[matrixSize];
		Double[][] data = new Double[matrixSize][matrixSize];
		columnNames[0] = "ObGlobal";
		int rang = 1;
		for(int i = 0; i < root.getCriterias().size(); i++) {
			columnNames[rang] = root.getCriterias().get(i).getId();
			rang++;
		}
		for(int i = 0; i < root.getCriterias().size(); i++) {
			for(int j = 0; j < root.getCriterias().get(i).getIndicators().size(); j++) {
				columnNames[rang] = root.getCriterias().get(i).getIndicators().get(j).getId();
				rang++;
			}
		}
		for(int i = rang; i < matrixSize; i++) {
			columnNames[i] = "alt";
		}
		for(int i = 0; i < matrixSize; i++) {
			for(int j = 0; j < matrixSize; j++) {
				data[i][j] = root.getSuperMatrix().get(i, j);
			}
		}
		guiSuperMatrix.setDataVector(data, columnNames);
	}

	public void reloadCell(int row, int column) {
		guiPrefMatrix.setValueAt(root.getMatrixCrCr().getMatrix().get(row, column), row, column);
	}

	public PrefMatrixTableModel getGuiPrefMatrix() {
		return guiPrefMatrix;
	}
}
