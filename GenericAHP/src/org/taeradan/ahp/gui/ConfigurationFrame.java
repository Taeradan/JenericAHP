/* Copyright 2009 Yves Dubromelle @ LSIS(www.lsis.org)
 * 
 * This file is part of GenericAHP.
 * 
 * GenericAHP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GenericAHP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GenericAHP.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.taeradan.ahp.gui;

import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JPopupMenu;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.taeradan.ahp.Criteria;
import org.taeradan.ahp.Indicator;
import org.taeradan.ahp.Root;


/**
 * Graphical user interface to configure the AHP tree and the preference matrix
 * @author  Yves Dubromelle
 */
public class ConfigurationFrame extends javax.swing.JFrame
{
	private DefaultTreeModel guiAhpTree;
	
	/** Creates new form ConfigurationFrame */
	public ConfigurationFrame()
	{	
		Root ahpRoot = new Root();
		guiAhpTree=new DefaultTreeModel(processAhpHierarchy(ahpRoot));
		initComponents();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents()
        {

                jScrollPane1 = new javax.swing.JScrollPane();
                jTreeAhp = new javax.swing.JTree();

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                setTitle("AHP Tree Configuration");

                jTreeAhp.setModel(guiAhpTree);
                jTreeAhp.addMouseListener(new java.awt.event.MouseAdapter()
                {
                        public void mouseClicked(java.awt.event.MouseEvent evt)
                        {
                                jTreeAhpMouseClicked(evt);
                        }
                });
                jScrollPane1.setViewportView(jTreeAhp);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

		private void jTreeAhpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTreeAhpMouseClicked
			System.out.println("bouton="+evt.getButton()+"nbClick"+evt.getClickCount());
			if(jTreeAhp.getPathForLocation(evt.getX(), evt.getY()) != null){
				DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTreeAhp.getPathForLocation(evt.getX(), evt.getY()).getLastPathComponent();
				System.out.println();
				if(evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2){
					Object object = node.getUserObject();
					if(object instanceof Root){
						Root root = (Root)object;
						RootDialog dialog = new RootDialog(this, true, root);
						dialog.setVisible(true);
					}
					if(object instanceof Criteria){
						Criteria criteria = (Criteria)object;
						CriteriaDialog dialog = new CriteriaDialog(this, true, criteria);
						dialog.setVisible(true);
					}
					if(object instanceof Indicator){
						Indicator indicator = (Indicator)object;
						IndicatorDialog dialog = new IndicatorDialog(this, true, indicator);
						dialog.setVisible(true);
					}
				}
				if(evt.getButton() == MouseEvent.BUTTON3){
					Object object = node.getUserObject();
					JPopupMenu contextMenu = new JPopupMenu();
	//				contextMenu.setLocation(evt.getXOnScreen(), evt.getYOnScreen());
					if(object instanceof Root){
						Root root = (Root)object;
						contextMenu.add("Add criteria");
						contextMenu.add("Edit");
						contextMenu.add("Delete");
	//					contextMenu.setVisible(true);
					}
					if(object instanceof Criteria){
						Criteria criteria = (Criteria)object;
						contextMenu.add("Add indicator");
						contextMenu.add("Edit");
						contextMenu.add("Delete");
	//					contextMenu.setVisible(true);
					}
					if(object instanceof Indicator){
						Indicator indicator = (Indicator)object;
						contextMenu.add("Edit");
						contextMenu.add("Delete");
	//					contextMenu.setVisible(true);
					}
					contextMenu.show(jTreeAhp, evt.getX(),evt.getY());
				}
			}
		}//GEN-LAST:event_jTreeAhpMouseClicked
	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{
				new ConfigurationFrame().setVisible(true);
			}
		});
	}
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JTree jTreeAhp;
        // End of variables declaration//GEN-END:variables
	
	/**
	 * Takes an initialized AHP root element and produces a tree by processing the AHP hierarchy
	 * @param ahpRoot Initialised AHP root
	 * @return node containing a AHP tree
	 */
	public static DefaultMutableTreeNode  processAhpHierarchy(Root ahpRoot){
		DefaultMutableTreeNode guiRoot = new DefaultMutableTreeNode(ahpRoot);
		ArrayList<Criteria> ahpCriterias = ahpRoot.getCriterias();
		ArrayList<DefaultMutableTreeNode> guiCriterias = new ArrayList<DefaultMutableTreeNode>();
		for(int i=0; i<ahpCriterias.size(); i++){
			guiCriterias.add(new DefaultMutableTreeNode(ahpCriterias.get(i)));
			guiRoot.add(guiCriterias.get(i));
			ArrayList<Indicator> ahpIndicators = ahpCriterias.get(i).getIndicators();
			ArrayList<DefaultMutableTreeNode> guiIndicators = new ArrayList<DefaultMutableTreeNode>();
			for(int j=0; j<ahpIndicators.size(); j++){
				guiIndicators.add(new DefaultMutableTreeNode(ahpIndicators.get(j)));
				guiCriterias.get(i).add(guiIndicators.get(j));
			}
		}
		return guiRoot;
	}
//	JOptionPane.showMessageDialog(this, evt);
}
