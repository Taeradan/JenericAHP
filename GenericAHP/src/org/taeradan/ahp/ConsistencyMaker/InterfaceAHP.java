/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MaMatriceFrame.java
 *
 * Created on 31 mai 2011, 14:24:44
 */

package org.taeradan.ahp.ConsistencyMaker;

import java.awt.Color;
import java.awt.HeadlessException;
import java.io.IOException;
import java.text.DateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.nfunk.jep.JEP;
import org.nfunk.jep.ParseException;
import org.taeradan.ahp.ConsistencyChecker;
import org.taeradan.ahp.PriorityVector;
import org.taeradan.ahp.gui.MyMatrixTable;
import org.taeradan.ahp.gui.MyMatrixTableModel;

/**
 *
 * @author Yannick
 */
public class InterfaceAHP extends javax.swing.JFrame implements Runnable{

	/**
	 *
	 */
	private final static double[] SAATY_VALUES = {1. / 9, 1. / 8, 1. / 7, 1. / 6, 1. / 5, 1. / 4,
												  1. / 3, 1. / 2, 1, 2, 3, 4, 5, 6, 7, 8, 9};

	 /*
	private final static double[] SAATY_VALUES = {0.1111, 0.125, 0.1429, 0.1667, 0.2, 0.25,
												  0.3333, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9};
	*/
	private MyMatrix myMatrix;
	private MyMatrixTableModel matrixTableModel;
	private CharSequenceAppender csa;
	private String file;
	private String fileHistorique;
	private int finSimulation = 0;
	private boolean changerCoeff = false;
	private Meter monHeure;
	private boolean boolHeure = true;
	private JEP monJep;
    /** Creates new form MaMatriceFrame */
    public InterfaceAHP() {
        initComponents();
		//On initialise la taille de la matrice Ã  6
		jTextFieldDimensions.setText("6");
		monJep = new JEP();
	    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jButtonValiderMatrice = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMatrice = new javax.swing.JTable();
        jTextFieldCR = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanelInit = new javax.swing.JPanel();
        jRadioButtonAleatoire = new javax.swing.JRadioButton();
        jRadioButtonSaaty = new javax.swing.JRadioButton();
        jRadioButtonP1 = new javax.swing.JRadioButton();
        jRadioButtonP2 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldDimensions = new javax.swing.JTextField();
        jTextFieldChemin = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButtonOK = new javax.swing.JButton();
        jButtonParcourir = new javax.swing.JButton();
        jPanelClassemnt = new javax.swing.JPanel();
        jPanel1erClassement = new javax.swing.JPanel();
        jTextField1erClass1 = new javax.swing.JTextField();
        jTextField1erClass2 = new javax.swing.JTextField();
        jTextField1erClass3 = new javax.swing.JTextField();
        jTextField1erClass4 = new javax.swing.JTextField();
        jTextField1erClass5 = new javax.swing.JTextField();
        jTextField1erClass6 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanelClassementFinal = new javax.swing.JPanel();
        jTextFieldClassFinal1 = new javax.swing.JTextField();
        jTextFieldClassFinal2 = new javax.swing.JTextField();
        jTextFieldClassFinal3 = new javax.swing.JTextField();
        jTextFieldClassFinal4 = new javax.swing.JTextField();
        jTextFieldClassFinal5 = new javax.swing.JTextField();
        jTextFieldClassFinal6 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jPanelClassementMatrice = new javax.swing.JPanel();
        jTextFieldClassMat1 = new javax.swing.JTextField();
        jTextFieldClassMat2 = new javax.swing.JTextField();
        jTextFieldClassMat3 = new javax.swing.JTextField();
        jTextFieldClassMat4 = new javax.swing.JTextField();
        jTextFieldClassMat5 = new javax.swing.JTextField();
        jTextFieldClassMat6 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButtonNewSimul = new javax.swing.JButton();
        jLabelCompteur = new javax.swing.JLabel();
        jLabelTime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jButtonValiderMatrice.setText("Valider Matrice");
        jButtonValiderMatrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValiderMatriceActionPerformed(evt);
            }
        });

        jTableMatrice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableMatrice);

        jLabel3.setText("CR:");

        jPanelInit.setBorder(javax.swing.BorderFactory.createTitledBorder("Initialisation"));

        buttonGroup1.add(jRadioButtonAleatoire);
        jRadioButtonAleatoire.setText("A");

        buttonGroup1.add(jRadioButtonSaaty);
        jRadioButtonSaaty.setText("S");

        buttonGroup2.add(jRadioButtonP1);
        jRadioButtonP1.setText("P1");

        buttonGroup2.add(jRadioButtonP2);
        jRadioButtonP2.setText("P2");

        jLabel1.setText("Taille matrice:");

        jTextFieldChemin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCheminActionPerformed(evt);
            }
        });

        jLabel2.setText("Chemin de sauvegarde:");

        jButtonOK.setText("Ok");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jButtonParcourir.setText("Parcourir");
        jButtonParcourir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonParcourirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelInitLayout = new javax.swing.GroupLayout(jPanelInit);
        jPanelInit.setLayout(jPanelInitLayout);
        jPanelInitLayout.setHorizontalGroup(
            jPanelInitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInitLayout.createSequentialGroup()
                .addGroup(jPanelInitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInitLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jRadioButtonAleatoire)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonSaaty)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButtonP1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonP2))
                    .addGroup(jPanelInitLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelInitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonOK)
                            .addGroup(jPanelInitLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldDimensions, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldChemin, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonParcourir)
                                .addGap(2, 2, 2)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelInitLayout.setVerticalGroup(
            jPanelInitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInitLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelInitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonAleatoire)
                    .addComponent(jRadioButtonSaaty)
                    .addComponent(jRadioButtonP1)
                    .addComponent(jRadioButtonP2))
                .addGap(18, 18, 18)
                .addGroup(jPanelInitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldDimensions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldChemin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButtonParcourir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonOK))
        );

        jPanelClassemnt.setBorder(javax.swing.BorderFactory.createTitledBorder("Classement"));

        jPanel1erClassement.setBorder(javax.swing.BorderFactory.createTitledBorder("1er Classement"));

        jTextField1erClass3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1erClass3ActionPerformed(evt);
            }
        });

        jTextField1erClass4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1erClass4ActionPerformed(evt);
            }
        });

        jLabel5.setText("1er:");

        jLabel7.setText("2Ã¨me:");

        jLabel8.setText("3Ã¨me:");

        jLabel9.setText("4Ã¨me:");

        jLabel10.setText("5Ã¨me:");

        jLabel11.setText("6Ã¨me:");

        javax.swing.GroupLayout jPanel1erClassementLayout = new javax.swing.GroupLayout(jPanel1erClassement);
        jPanel1erClassement.setLayout(jPanel1erClassementLayout);
        jPanel1erClassementLayout.setHorizontalGroup(
            jPanel1erClassementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1erClassementLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1erClassementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1erClassementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel5)
                        .addComponent(jLabel7))
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jPanel1erClassementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1erClass5)
                    .addComponent(jTextField1erClass2)
                    .addComponent(jTextField1erClass6, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                    .addComponent(jTextField1erClass3)
                    .addComponent(jTextField1erClass4, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                    .addComponent(jTextField1erClass1))
                .addContainerGap())
        );
        jPanel1erClassementLayout.setVerticalGroup(
            jPanel1erClassementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1erClassementLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1erClassementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1erClass1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1erClassementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1erClass2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1erClassementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1erClass3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1erClassementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1erClass4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1erClassementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1erClass5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1erClassementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1erClass6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanelClassementFinal.setBorder(javax.swing.BorderFactory.createTitledBorder("Classement Final"));

        jLabel18.setText("1er:");

        jLabel19.setText("2Ã¨me:");

        jLabel20.setText("3Ã¨me:");

        jLabel21.setText("4Ã¨me:");

        jLabel22.setText("5Ã¨me:");

        jLabel23.setText("6Ã¨me:");

        javax.swing.GroupLayout jPanelClassementFinalLayout = new javax.swing.GroupLayout(jPanelClassementFinal);
        jPanelClassementFinal.setLayout(jPanelClassementFinalLayout);
        jPanelClassementFinalLayout.setHorizontalGroup(
            jPanelClassementFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelClassementFinalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelClassementFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelClassementFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel19)
                        .addComponent(jLabel22)
                        .addComponent(jLabel21)
                        .addComponent(jLabel20)
                        .addComponent(jLabel18))
                    .addComponent(jLabel23))
                .addGap(18, 18, 18)
                .addGroup(jPanelClassementFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldClassFinal6, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextFieldClassFinal4, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextFieldClassFinal5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextFieldClassFinal1, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextFieldClassFinal2, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jTextFieldClassFinal3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelClassementFinalLayout.setVerticalGroup(
            jPanelClassementFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelClassementFinalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelClassementFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldClassFinal1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelClassementFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldClassFinal2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelClassementFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldClassFinal3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelClassementFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldClassFinal4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelClassementFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldClassFinal5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelClassementFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldClassFinal6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addContainerGap())
        );

        jPanelClassementMatrice.setBorder(javax.swing.BorderFactory.createTitledBorder("Classement matrice"));

        jLabel12.setText("1er:");

        jLabel13.setText("2Ã¨me:");

        jLabel14.setText("3Ã¨me:");

        jLabel15.setText("4Ã¨me:");

        jLabel16.setText("5Ã¨me:");

        jLabel17.setText("6Ã¨me:");

        javax.swing.GroupLayout jPanelClassementMatriceLayout = new javax.swing.GroupLayout(jPanelClassementMatrice);
        jPanelClassementMatrice.setLayout(jPanelClassementMatriceLayout);
        jPanelClassementMatriceLayout.setHorizontalGroup(
            jPanelClassementMatriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelClassementMatriceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelClassementMatriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelClassementMatriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel12)
                        .addComponent(jLabel13))
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17))
                .addGap(18, 18, 18)
                .addGroup(jPanelClassementMatriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldClassMat1, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                    .addComponent(jTextFieldClassMat2, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                    .addComponent(jTextFieldClassMat3, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                    .addComponent(jTextFieldClassMat4, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                    .addComponent(jTextFieldClassMat5, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                    .addComponent(jTextFieldClassMat6, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelClassementMatriceLayout.setVerticalGroup(
            jPanelClassementMatriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelClassementMatriceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelClassementMatriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldClassMat1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelClassementMatriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldClassMat2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelClassementMatriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldClassMat3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(6, 6, 6)
                .addGroup(jPanelClassementMatriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldClassMat4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelClassementMatriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldClassMat5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelClassementMatriceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldClassMat6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout jPanelClassemntLayout = new javax.swing.GroupLayout(jPanelClassemnt);
        jPanelClassemnt.setLayout(jPanelClassemntLayout);
        jPanelClassemntLayout.setHorizontalGroup(
            jPanelClassemntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelClassemntLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1erClassement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanelClassementMatrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelClassementFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelClassemntLayout.setVerticalGroup(
            jPanelClassemntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelClassemntLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelClassemntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1erClassement, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelClassementFinal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                    .addComponent(jPanelClassementMatrice, 0, 204, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1: Importance Ã©gale"},
                {"3: Un peu plus imortant"},
                {"5: Plus important"},
                {"7: Beaucoup plus important"},
                {"9: Absolument plus important"},
                {"2,4,6: Valeurs intermÃ©diaires"}
            },
            new String [] {
                "Coefficient de Saaty"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1/1: 1"},
                {"1/2: 0.5"},
                {"1/3: 0.3333"},
                {"1/4:0.25"},
                {"1/5:0.2"},
                {"1/6:0.1667"},
                {"1/7:0.1429"},
                {"1/8:0.125"},
                {"1/9:0.1111"}
            },
            new String [] {
                "Inverse des coefficient de Saaty"
            }
        ));
        jScrollPane4.setViewportView(jTable4);

        jButtonNewSimul.setText("Nouvelle Simulation");
        jButtonNewSimul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewSimulActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelInit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(104, 104, 104))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(15, 15, 15)))
                            .addGap(60, 60, 60))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButtonNewSimul)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabelCompteur, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 372, Short.MAX_VALUE)
                            .addComponent(jLabelTime, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelClassemnt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldCR, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonValiderMatrice))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(135, 135, 135)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonNewSimul)
                            .addComponent(jLabelCompteur, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                            .addComponent(jLabelTime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelInit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jButtonValiderMatrice)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFieldCR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addComponent(jPanelClassemnt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
	/*
	 * Cette mÃ©thode creer les matrices et les retournes(vide ou rempli)
	 */
	public MyMatrix creerMatrice(int matrixSize,int type) {
	//jatoute un paramÃ©tre pour l'init du tableau ou la crÃ©ation de la matrice
		MyMatrix maMatrice = null;
		MatrixValue matrixValue = new MatrixValue();
		double newValue = 0;
		
		//CrÃ©ation matrice vide
		if(type == 0)
		{
		    maMatrice = new MyMatrix(matrixSize, matrixSize);
		}
		//CrÃ©ation matrice rempli
		else
		{
			maMatrice = new MyMatrix(matrixSize, matrixSize);
			int choix;
			for (int i = 0; i < maMatrice.getRowDimension(); i++) {
				for (int j = i + 1; j < maMatrice.getColumnDimension(); j++) {
					
					//on rÃ©cupÃ¨re les valeurs saisies de la matrice
					monJep.parseExpression(jTableMatrice.getValueAt(i + 1, j + 1).toString());
					//on la stocke
					newValue = monJep.getValue();
					//newValue = Double.parseDouble(jTableMatrice.getValueAt(i+1, j+1).toString());
					//Si la valeur n'appartient pas Ã  l'Ã©chelle de saaty
					//on demande a l'expert de la modifier
					while(!isInSaatysSacale(newValue))
					{
						choix = 0;
						while(choix == 0)
						{
							JOptionPane jop = new JOptionPane();
							String val = jop.showInputDialog(null, "Erreur avec la valeur "+newValue+" veuillez la re-saisir la valeur:", "Erreur saisi", JOptionPane.QUESTION_MESSAGE);
							jTableMatrice.setValueAt(val, i+1, j+1);
							//si clik Ok
							if(val!=null)
							{
								//Si pas de saisi
								if(val.equalsIgnoreCase(""))
								{
									JOptionPane.showMessageDialog(null, "Veuillez saisir une valeur", "Information",
											JOptionPane.INFORMATION_MESSAGE);
								}
								//si saisi on rÃ©cup la valeur
								else{
									choix = 1;
									//on rÃ©cupÃ¨re les valeurs saisies de la matrice
									monJep.parseExpression(val);
									//on la stocke
									newValue = monJep.getValue();
								}
							}
							//si clik Annuler
							else choix = 1;
						}
					}					
					/*Partie supÃ©rieure*/
					matrixValue.setValue(newValue);
					matrixValue.setRow(i);
					matrixValue.setColumn(j);
					maMatrice.setMatrixValue(matrixValue);
					/*RÃ©ciprocitÃ©*/
					matrixValue.setValue(1 / newValue);
					matrixValue.setRow(j);
					matrixValue.setColumn(i);
					maMatrice.setMatrixValue(matrixValue);
				}
			}
			/*Diagonale*/
			for (int i = 0; i < maMatrice.getRowDimension(); i++)
			{
				matrixValue.setValue(1);
				matrixValue.setRow(i);
				matrixValue.setColumn(i);
				maMatrice.setMatrixValue(matrixValue);
			}
		}
		return maMatrice;
	}
	/**
	 * Cette mÃ©thode permet de tester les coefficients de saaty
	 * @param value
	 * @return
	 */
	public static boolean isInSaatysSacale(double value) {
		boolean result = false;

		for (int i = 0; i < SAATY_VALUES.length; i++) {
			double d = SAATY_VALUES[i];
			if (value == d) {
				result = true;
			}
		}
		return result;
	}
	/*
	 * Cette mÃ©thode permet de trouver les coefficients de saaty Ã  changer
	 */
	public MatrixValue readSaatysRanking(
			Collection<MatrixValue> collectionOfSortedMatrixValues, MyMatrix myPreferenceMatrix,
			String file) throws IOException {

		boolean tempBoolean;
		int isValueChosen = 0;
		MatrixValue matrixValue = new MatrixValue();
		Iterator<MatrixValue> valueIterator;
		MatrixValue matrixValueToPrint = new MatrixValue();
		CharSequenceAppender monCsa = new CharSequenceAppender(file);
		MyMatrix tempMatrix = new MyMatrix();
		MyMatrix tempVector = new MyMatrix();
		String tempString;
		ConsistencyChecker consistencyChecker = new ConsistencyChecker();
		boolean isFound = false;
		MatrixValue tempMatrixValue = new MatrixValue();

		valueIterator = collectionOfSortedMatrixValues.iterator();
		
		MonCellRenderer monCell = new MonCellRenderer(0,0);
		jTableMatrice.setDefaultRenderer(Object.class,monCell);

		while (isValueChosen == 0) {
			matrixValue = valueIterator.next();
			matrixValueToPrint.setRow(matrixValue.getRow());
			matrixValueToPrint.setColumn(matrixValue.getColumn());
			matrixValueToPrint.setValue(myPreferenceMatrix.get(matrixValueToPrint.getRow(), matrixValueToPrint.
					getColumn()));
			//on redessine la fenetre
			this.repaint();
			
			monCell.setCol(matrixValueToPrint.getColumn()+1);
			monCell.setRow(matrixValueToPrint.getRow()+1);
			//jTableMatrice.setDefaultRenderer(Object.class,new MonCellRenderer(matrixValueToPrint.getRow()+1,matrixValueToPrint.getColumn()+1));
			//jTable1.setDefaultRenderer(Object.class,new MonCellRenderer());
			//on ouvre un fenetre de dialogue pour afficher la valeur Ã  modifier
			JOptionPane jop = new JOptionPane();
			int option = jop.showConfirmDialog(null, "Modifier la valeur "
							   + matrixValueToPrint.getValue()
							   + " ( "
							   + (matrixValueToPrint.getRow() + 1)
							   + " , "
							   + (matrixValueToPrint.getColumn() + 1)
							   + " )"
							   + " ?", "Modification des valeurs", JOptionPane.YES_NO_CANCEL_OPTION);
			
			//si on clique sur ok on sor du while
			if (option == jop.OK_OPTION) {
				isValueChosen = 1;
			}
			else if(option == jop.CANCEL_OPTION) {
				isValueChosen = 1;
				finSimulation = -1;
			}
			else if (!valueIterator.hasNext()) {
				//System.out.println("Retour en haut du classement");
				valueIterator = collectionOfSortedMatrixValues.iterator();
			}
		}
		//si l'expert n'a pas mit Ã  la simulation
		if(finSimulation != -1)
		{
			/*parcours de la liste pour l'Ã©criture dans le fichier*/
			valueIterator = collectionOfSortedMatrixValues.iterator();

			while ((valueIterator.hasNext()) && (!isFound)) {

				tempMatrixValue = valueIterator.next();
				monCsa.insertLineFeed();

				/*Ã©criture du best fit associÃ© Ã  la valeur proposÃ©e*/
				//copie de la matrice initiale
				tempMatrix = tempMatrix.copyMyMatrix(myPreferenceMatrix);

				//calcul du vecteur propre associÃ© Ã  tempMatrix
				tempVector = PriorityVector.build(tempMatrix);
				//calcul du best fit
				double BestFit = SaatysTools.calculateBestFit(tempMatrix, tempVector, tempMatrixValue.
						getRow(), tempMatrixValue.getColumn());
				//Ã©criture du best fit
				tempString = "" + BestFit;
				monCsa.append(tempString);
				monCsa.insertSeparator();

				/*Ã©criture des indices de la valeur proposÃ©e par Saaty dans le fichier*/
				tempString = "" + (tempMatrixValue.getRow() + 1);
				monCsa.append(tempString);
				monCsa.insertSeparator();
				tempString = "" + (tempMatrixValue.getColumn() + 1);
				monCsa.append(tempString);
				monCsa.insertSeparator();

				/*Ã©criture de la cohÃ©rence si l'expert suivait les conseils de Saaty*/

				//remplacement de la valeur (i,j) par BestFit
				MatrixValue newMatrixValue = new MatrixValue();
				newMatrixValue.setRow(tempMatrixValue.getRow());
				newMatrixValue.setColumn(tempMatrixValue.getColumn());
				newMatrixValue.setValue(BestFit);
				tempMatrix.setMatrixValue(newMatrixValue);

				//remplacement de la valeur (j,i) par 1/BestFit
				newMatrixValue.setRow(tempMatrixValue.getColumn());
				newMatrixValue.setColumn(tempMatrixValue.getRow());
				newMatrixValue.setValue(1. / BestFit);
				tempMatrix.setMatrixValue(newMatrixValue);

				//rafraÃ®chissement du vecteur de prioritÃ©
				tempVector = PriorityVector.build(tempMatrix);
				//calcul et Ã©criture de la cohÃ©rence
				tempBoolean = consistencyChecker.isConsistent(tempMatrix, tempVector);
				tempString = "" + consistencyChecker.getCrResult();
				monCsa.append(tempString);
				monCsa.insertSeparator();

				if (matrixValue.equals(tempMatrixValue)) {
					isFound = true;
				}
			}
			monCsa.close();
		}
		else monCsa.close();
		return matrixValue;
	}

	private void showMatrixTable(MyMatrixTable maTable, MyMatrix myMatrix) throws HeadlessException {
		// Show a frame with a table
		//this.setSize(1000, 35 * myMatrix.getRowDimension());
		//this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//JPanel pan = new JPanel();
		//pan.add(new JButton("Valider"));
		this.setContentPane(maTable);
		//this.setContentPane(pan, BorderLayout.SOUTH);
		//this.setContentPane(maTable);
		//this.setSize(1000, 27 * myMatrix.getRowDimension());
	}
	private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
		// TODO add your handling code here:
		//on crÃ©e et lance le thread pour efficher un compteur
		monHeure = new Meter(jLabelTime, this);
		monHeure.setCommencerAZero(false);
		monHeure.start();

		myMatrix = new MyMatrix();
		matrixTableModel = new MyMatrixTableModel();
		//On crÃ©e la matrice vide
		myMatrix = creerMatrice(Integer.parseInt(jTextFieldDimensions.getText()),0);
		//maTable = new MyMatrixTable();
		
		//on teste pour savoir quelle est le pb choisi
		if(jRadioButtonP1.isSelected()==true) 
		{
			//on crÃ©e le fichier historique Ã  partir de "file"
			fileHistorique = file+"histI.csv";
			file += "I.csv";
			try {
				csa = new CharSequenceAppender(file);
				csa.append("Probleme 1");
				csa.insertSeparator();
				//On teste saaty ou alÃ©atoire
				if(jRadioButtonSaaty.isSelected() == true) csa.append("Saaty");
				else csa.append("Aleatoire");
				csa.insertLineFeed();
			} catch (IOException ex) {
				Logger.getLogger(InterfaceAHP.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
		else
		{
			//on crÃ©e le fichier historique Ã  partir de "file"
			fileHistorique = file+"histII.csv";
			file += "II.csv";
			try {
				csa = new CharSequenceAppender(file);
				csa.append("Probleme 2");
				csa.insertSeparator();
				//On teste saaty ou alÃ©atoire
				if(jRadioButtonSaaty.isSelected() == true) csa.append("Saaty");
				else csa.append("Aleatoire");
				csa.insertLineFeed();
			} catch (IOException ex) {
				Logger.getLogger(InterfaceAHP.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
		
		/*Interface graphique*/
		matrixTableModel.setMatrix(myMatrix, jRadioButtonP1.isSelected());
		//on ajoute directement matrixTableModel Ã  jTable1 bugg??????
		jTableMatrice.setModel(matrixTableModel);
		//maTable.setModel(matrixTableModel);
		jLabel6.setText("Veuillez remplir la partie supÃ©rieure de la matrice avec les coefficients de SAATY:");
		//on affiche la matrice
		//showMatrixTable((MyMatrixTable) jTable1,myMatrix);		
	}//GEN-LAST:event_jButtonOKActionPerformed
	/*
	 * Cette mÃ©thode ecrit dans le fichier csv 
	 */
	private double creerFichierCsv()
	{
		ConsistencyChecker consistencyChecker = new ConsistencyChecker();
		PriorityVector priorityVector = PriorityVector.build(myMatrix);
		MyMatrix epsilon = new MyMatrix();
		MatrixValue matrixValue = new MatrixValue();
		SaatysTools saatysTools = new SaatysTools();
		Collection<MatrixValue> collectionOfSortedMatrixValues = new ArrayList<MatrixValue>();
		double newValue = 0;
		double oldValue;
		int coordRowVal;
		int coordColVal;
		/*Ecriture de la matrice et du vecteur de prioritÃ© dans le fichier*/
		csa.insertMatrix(myMatrix);
		csa.insertLineFeed();
		csa.insertMatrix(priorityVector);
		csa.insertLineFeed();

		//on crÃ©e le fichier et on l'initialise avec la 1Ã¨re matrice
		this.ecrirefichierHistorique(myMatrix, 0,0,0,0);

		//on va afficher le classement des critÃ¨res de la 1ere matrice
		String[] classement = this.classerCriteres(priorityVector);
		jTextFieldClassMat1.setText(classement[5]);
		jTextFieldClassMat2.setText(classement[4]);
		jTextFieldClassMat3.setText(classement[3]);
		jTextFieldClassMat4.setText(classement[2]);
		jTextFieldClassMat5.setText(classement[1]);
		jTextFieldClassMat6.setText(classement[0]);
		/*Ecriture du CR*/
		consistencyChecker.isConsistent(myMatrix, priorityVector);
		String tempString = "" + consistencyChecker.getCrResult();
		csa.append(tempString);
		csa.insertLineFeed();
		csa.insertLineFeed();

		//On affiche le cr
		jTextFieldCR.setText(String.valueOf(consistencyChecker.getCrResult()));

		//en-tÃªte du tableau, on teste quelle est la mÃ©thode chosi(AlÃ©atoire, Saaty)
		if(jRadioButtonSaaty.isSelected() == true)
		csa.append(
				"BestFit;Saaty i;Saaty j; Saaty consistency;Expert Init Value;Expert Changed Value ; Expert Position in Saaty's ranking;CR\n");
		else csa.append(
				"BestFit;Saaty i;Saaty j;Saaty consistency;BestFit for random value;Random i;Random j;Position in Saaty's ranking;Random consistency;Expert Init Value;Expert Changed Value;CR\n");

		csa.insertLineFeed();
		csa.close();
		int iterationCounter = 0;
		boolean test = false;
		boolean myConsistent = consistencyChecker.isConsistent(myMatrix, priorityVector);

		while (!myConsistent) {

			//On continue si l'expert n'a pas choisi de mettre fin Ã  la simulation
			if(finSimulation != -1)
			{
				//incrÃ©mentation du compteur du nombre d'itÃ©ration
				iterationCounter++;

				//on teste quelles mÃ©thode(alÃ©aloire, saaty)
				if(jRadioButtonSaaty.isSelected() == true)
				{
					/*Calcul matrice epsilon*/
					epsilon = saatysTools.calculateEpsilonMatrix(myMatrix, priorityVector);
					/*Recherche de la valeur Ã  modifier*/
					collectionOfSortedMatrixValues = saatysTools.getRank(myMatrix, priorityVector, epsilon);
					try {
						matrixValue = readSaatysRanking(collectionOfSortedMatrixValues, myMatrix, file);
					} catch (IOException ex) {
						Logger.getLogger(InterfaceAHP.class.getName()).log(Level.SEVERE, null, ex);
					}
				}
				else
				{
					collectionOfSortedMatrixValues = RandomTools.getRank(myMatrix);
					matrixValue = getValueToModifiyByRanking(collectionOfSortedMatrixValues);					
					try {
						/*Writing of Saaty's propositions and of random ranking*/
						RandomTools.writeRandomAndSaatysProposition(myMatrix,collectionOfSortedMatrixValues,
								matrixValue,priorityVector,file);
					} catch (IOException ex) {
						Logger.getLogger(InterfaceAHP.class.getName()).log(Level.SEVERE, null, ex);
					}
					
				}
				//si l'expert n'a pas mis fin Ã¨ la simulation et veut changer le coeff
				if(finSimulation != -1)
				{
					//on stocke les diffÃ©rentes valeur pour le fichier historique
					oldValue = myMatrix.get(matrixValue.getRow(), matrixValue.getColumn());
					coordRowVal = (matrixValue.getRow() + 1);
					coordColVal = (matrixValue.getColumn() + 1);
					//on va tester le joptionPane
					test = false;
					while(test == false)
					{
						JOptionPane jopValid = new JOptionPane();
						String val = jopValid.showInputDialog(null, "Vous avez choisi de remplacer la valeur "
								+ oldValue
								+ " de coordonnÃ©es "
								+ " ( "
								+ coordRowVal
								+ " , "
								+ coordColVal
								+ " ) par:", "Remplacement valeur", JOptionPane.QUESTION_MESSAGE);
						if(val!=null)
						{
							if(val.equalsIgnoreCase(""))
							{
								JOptionPane.showMessageDialog(null, "Veuillez saisir une valeur", "Information",
										JOptionPane.INFORMATION_MESSAGE);
							}
							else{
								test = true;
								monJep.parseExpression(val);
								newValue = monJep.getValue();
							}
						}
						else test = false;
					}

					try {
						/*Ecrire la valeur que souhaite modifier l'expert*/
						csa = new CharSequenceAppender(file);
					} catch (IOException ex) {
						Logger.getLogger(InterfaceAHP.class.getName()).log(Level.SEVERE, null, ex);
					}
					tempString = "" + myMatrix.get(matrixValue.getRow(), matrixValue.getColumn());
					csa.append(tempString);
					csa.insertSeparator();
					//Si la valeur modifier n'appartient pas Ã  l'Ã©chelle de saaty
					//on demande a l'expert de la modifier
					while(!isInSaatysSacale(newValue))
					{
						int choix = 0;
						while(choix == 0)
						{
							JOptionPane jop = new JOptionPane();
							String val = jop.showInputDialog(null, "Erreur avec la valeur "+newValue+" veuillez la re-saisir la valeur:", "Erreur saisi", JOptionPane.QUESTION_MESSAGE);
							if(val!=null)
							{
								if(val.equalsIgnoreCase(""))
								{
									JOptionPane.showMessageDialog(null, "Veuillez saisir une valeur", "Information",
											JOptionPane.INFORMATION_MESSAGE);
								}
								else{
									choix = 1;
									monJep.parseExpression(val);
									newValue = monJep.getValue();
								}
							}
							else choix = 1;
						}
					}
					/*Ecrire la valeur modifiÃ©e par l'utilisateur*/
					tempString = "" + newValue;
					csa.append(tempString);
					csa.insertSeparator();
					//uniquement si on fai la mÃ©thode saaty
					if(jRadioButtonSaaty.isSelected() == true){
						/*Calculer le placement dans le classement de Saaty*/
						int location = SaatysTools.getLocationInRank(collectionOfSortedMatrixValues,
																	 matrixValue.getRow(),
																	 matrixValue.getColumn());
						tempString = "" + location;
						csa.append(tempString);
						csa.insertSeparator();
					}
					/*Changement d'une valeur et de la valeur rÃ©ciproque associÃ©e dans
					la matrice*/

					//Valeur directement modifiÃ©e
					matrixValue.setValue(newValue);
					myMatrix.setMatrixValue(matrixValue);

					//Valeur rÃ©ciproquement modifiÃ©e
					int tempI = matrixValue.getRow();
					int tempJ = matrixValue.getColumn();
					matrixValue.setValue(1 / newValue);
					matrixValue.setRow(tempJ);
					matrixValue.setColumn(tempI);
					myMatrix.setMatrixValue(matrixValue);

					//Affichage nouvelle matrice
					//	myMatrix.print(5, 5);

					//Affichage nouvelle matrice
					matrixTableModel.setMatrix(myMatrix, jRadioButtonP1.isSelected());
					jTableMatrice.setModel(matrixTableModel);

					//RÃ©actualisation du vecteur de prioritÃ© associÃ© Ã  la nouvelle matrice
					priorityVector = PriorityVector.build(myMatrix);
					//		priorityVector.print(5, 5);

					//Ecriture du nouveau CR
					consistencyChecker.isConsistent(myMatrix, priorityVector);
					tempString = "" + consistencyChecker.getCrResult();
					csa.append(tempString);
					csa.close();
					//on va ecrire dans le fichier historique
					this.ecrirefichierHistorique(myMatrix, oldValue, coordRowVal, coordColVal, newValue);
					//on rÃ©cupÃ©re la nouvelle valeur
					myConsistent = consistencyChecker.isConsistent(myMatrix, priorityVector);
				}
				//si il Ã  mi fin on sort de la boucle
				else if(finSimulation == -1)
				{
					//on arrete le thread
					monHeure.stop();
					myConsistent = true;
				}
				//on affiche un cpt pour les observations avec un coeff de 7.5
				jLabelCompteur.setText(String.valueOf(iterationCounter*7.5));
			}
		}
		if(finSimulation != -1)	jLabel4.setText("Bravo la matrice est cohÃ©rente!!!!!");
		try {
			csa = new CharSequenceAppender(file);
		} catch (IOException ex) {
			Logger.getLogger(InterfaceAHP.class.getName()).log(Level.SEVERE, null, ex);
		}
		/*Ecriture de la matrice et du vecteur de prioritÃ© dans le fichier*/
		csa.insertLineFeed();
		csa.insertLineFeed();
		csa.insertMatrix(myMatrix);
		csa.insertLineFeed();
		csa.insertMatrix(priorityVector);
		csa.insertLineFeed();

		//on va afficher le classement final des critÃ¨res 
		String[] classementF = this.classerCriteres(priorityVector);
		jTextFieldClassFinal1.setText(classementF[5]);
		jTextFieldClassFinal2.setText(classementF[4]);
		jTextFieldClassFinal3.setText(classementF[3]);
		jTextFieldClassFinal4.setText(classementF[2]);
		jTextFieldClassFinal5.setText(classementF[1]);
		jTextFieldClassFinal6.setText(classementF[0]);
		
		//Ecriture du CR
		consistencyChecker.isConsistent(myMatrix, priorityVector);
		tempString = "" + consistencyChecker.getCrResult();
		csa.append(tempString);
		csa.insertLineFeed();
		csa.insertLineFeed();

		tempString="Number of Iterations;"+iterationCounter;
		csa.append(tempString);

		csa.close();
		return consistencyChecker.getCrResult();
	}
	private void jButtonValiderMatriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValiderMatriceActionPerformed
		// TODO add your handling code here:

		myMatrix = new MyMatrix();
		matrixTableModel = new MyMatrixTableModel();
		//On crÃ©e la matrice rempli
		myMatrix = creerMatrice(Integer.parseInt(jTextFieldDimensions.getText()),1);
		//maTable = new MyMatrixTable();
		/*Interface graphique*/
		matrixTableModel.setMatrix(myMatrix, jRadioButtonP1.isSelected());
		//on ajoute directement matrixTableModel Ã  jTable1 bugg??????
		jTableMatrice.setModel(matrixTableModel);
		//maTable.setModel(matrixTableModel);
		//on va cree le fichier .csv et le modifier et on rÃ©cupÃ©rer le CR et afficher
		jTextFieldCR.setText(String.valueOf(creerFichierCsv()));
		//on affiche la matrice
		//showMatrixTable( (MyMatrixTable) jTable1,myMatrix);
		//on ferme le flux
		csa.close();
		//on remet Ã  0 l'attribut
		finSimulation = 0;
		//on arrete le thread si c pas dÃ©ja fait
		if(finSimulation != -1)	monHeure.stop();
		
	}//GEN-LAST:event_jButtonValiderMatriceActionPerformed
	/*
	 * Cette mÃ©thode permet de stocker les diffÃ©rentes matrices,les valeurs modifiÃ©es
	 */
	private void ecrirefichierHistorique(MyMatrix matrix,double oldValue, int coordx,
			int coordy, double newVal)
	{
		CharSequenceAppender csa = null;
		String tempString;
		try {
			csa = new CharSequenceAppender(fileHistorique);
		} catch (IOException ex) {
			Logger.getLogger(InterfaceAHP.class.getName()).log(Level.SEVERE, null, ex);
		}
		tempString = ""+oldValue;
		csa.append(tempString);
		csa.insertSeparator();
		tempString = coordx + "," + coordy;
		csa.append(tempString);
		csa.insertSeparator();
		tempString = ""+newVal;
		csa.append(tempString);
		csa.insertLineFeed();
		csa.insertMatrix(matrix);		
		csa.insertLineFeed();
		csa.close();

	}
	/**
	 * This method returns the value which will be modified by the expert
	 * @param collectionOfNonSortedMatrixValues
	 * @return
	 */
	public MatrixValue getValueToModifiyByRanking(
			Collection<MatrixValue> collectionOfNonSortedMatrixValues) {
		
		int isValueChosen = 0;
		MatrixValue matrixValue = new MatrixValue();
		Iterator<MatrixValue> valueIterator;
		/* While loop which proposes a random ranking of MatrixValue
		 * while the expert hasn't chosen the value he wants to modify
		 */
		valueIterator = collectionOfNonSortedMatrixValues.iterator();
		MonCellRenderer monCell = new MonCellRenderer(0,0);
		jTableMatrice.setDefaultRenderer(Object.class,monCell);
		while (isValueChosen == 0) {
			matrixValue = valueIterator.next();
			//on redessine la fenetre
			this.repaint();

			monCell.setCol(matrixValue.getColumn()+1);
			monCell.setRow(matrixValue.getRow()+1);
			//on ouvre un fenetre de dialogue pour afficher la valeur Ã  modifier
			JOptionPane jop = new JOptionPane();
			int option = jop.showConfirmDialog(null, "Modifier la valeur "
							   + matrixValue.getValue()
							   + " ( "
							   + (matrixValue.getRow() + 1)
							   + " , "
							   + (matrixValue.getColumn() + 1)
							   + " )"
							   + " ?", "Modification des valeurs", JOptionPane.YES_NO_CANCEL_OPTION);
			//si on clique sur ok on sor du while
			if (option == jop.OK_OPTION) {
				isValueChosen = 1;
				changerCoeff = true;
			}
			else if(option == jop.CANCEL_OPTION) {
				isValueChosen = 1;
				finSimulation = -1;
			}
			else if (!valueIterator.hasNext()) {
				//System.out.println("Retour en haut du classement");
				valueIterator = collectionOfNonSortedMatrixValues.iterator();
			}
		}
		return matrixValue;
	}
	/*
	 * Cette mÃ©thode permet de classer les critÃ¨res et de renvoyer le classement
	 */
	private String[] classerCriteres(PriorityVector v)
	{
		//on teste quel est le pb choisi
		if(jRadioButtonP1.isSelected()==true)
		{
			String columnNames[] = {"Temps de transport", "CoÃ»t", "Confort" , "Pollution",
				"QualitÃ© de service","SÃ©curitÃ©"};
			String[] classementString = new String[v.getRowDimension()];
			double[] monClassement =  new double[v.getRowDimension()];
			for( int i=0; i<v.getRowDimension();i++)
			{
				monClassement[i] = v.get(i, 0);
			}
			//on classe par ordre croissant
			Arrays.sort(monClassement);

			for( int i=0; i<v.getRowDimension();i++)
			{
				for( int j=0; j<v.getRowDimension();j++)
				{
					//on rÃ©cupÃ©rer les critÃ¨res classÃ©s
					if(monClassement[i] == v.get(j, 0))classementString[i]= columnNames[j];
				}
			}
			return classementString;
		}
		else
		{
			String columnNames[] = {"Prix", "SÃ©curitÃ©", "Pollution" , "Design",
				"DurÃ©e de vie", "Taille"};
			String[] classementString = new String[v.getRowDimension()];
			double[] monClassement =  new double[v.getRowDimension()];
			for( int i=0; i<v.getRowDimension();i++)
			{
				monClassement[i] = v.get(i, 0);

			}
			//on classe par ordre croissant
			Arrays.sort(monClassement);

			for( int i=0; i<v.getRowDimension();i++)
			{
				for( int j=0; j<v.getRowDimension();j++)
				{
					//on rÃ©cupÃ©rer les critÃ¨res classÃ©s
					if(monClassement[i] == v.get(j, 0))classementString[i]= columnNames[j];
				}
			}
			return classementString;
		}	
	}

	private void jTextFieldCheminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCheminActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_jTextFieldCheminActionPerformed

	private void jTextField1erClass3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1erClass3ActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_jTextField1erClass3ActionPerformed

	private void jTextField1erClass4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1erClass4ActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_jTextField1erClass4ActionPerformed

	private void jButtonNewSimulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewSimulActionPerformed
		// TODO add your handling code here:
		initComponents();
		this.dispose();
		new InterfaceAHP().setVisible(true);
	}//GEN-LAST:event_jButtonNewSimulActionPerformed

	private void jButtonParcourirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonParcourirActionPerformed
		// TODO add your handling code here:
		JFileChooser jfc = new JFileChooser();
		jfc.setVisible(true);
		int choix =  jfc.showSaveDialog(this);
		if (JFileChooser.APPROVE_OPTION == choix)
        {
            //On rÃ©cup le chemin
            file = jfc.getSelectedFile().getAbsolutePath();
			//On affiche le chemin de sauvegarde
			jTextFieldChemin.setText(file);
		}
	}//GEN-LAST:event_jButtonParcourirActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new InterfaceAHP().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonNewSimul;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JButton jButtonParcourir;
    private javax.swing.JButton jButtonValiderMatrice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelCompteur;
    private javax.swing.JLabel jLabelTime;
    private javax.swing.JPanel jPanel1erClassement;
    private javax.swing.JPanel jPanelClassementFinal;
    private javax.swing.JPanel jPanelClassementMatrice;
    private javax.swing.JPanel jPanelClassemnt;
    private javax.swing.JPanel jPanelInit;
    private javax.swing.JRadioButton jRadioButtonAleatoire;
    private javax.swing.JRadioButton jRadioButtonP1;
    private javax.swing.JRadioButton jRadioButtonP2;
    private javax.swing.JRadioButton jRadioButtonSaaty;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTableMatrice;
    private javax.swing.JTextField jTextField1erClass1;
    private javax.swing.JTextField jTextField1erClass2;
    private javax.swing.JTextField jTextField1erClass3;
    private javax.swing.JTextField jTextField1erClass4;
    private javax.swing.JTextField jTextField1erClass5;
    private javax.swing.JTextField jTextField1erClass6;
    private javax.swing.JTextField jTextFieldCR;
    private javax.swing.JTextField jTextFieldChemin;
    private javax.swing.JTextField jTextFieldClassFinal1;
    private javax.swing.JTextField jTextFieldClassFinal2;
    private javax.swing.JTextField jTextFieldClassFinal3;
    private javax.swing.JTextField jTextFieldClassFinal4;
    private javax.swing.JTextField jTextFieldClassFinal5;
    private javax.swing.JTextField jTextFieldClassFinal6;
    private javax.swing.JTextField jTextFieldClassMat1;
    private javax.swing.JTextField jTextFieldClassMat2;
    private javax.swing.JTextField jTextFieldClassMat3;
    private javax.swing.JTextField jTextFieldClassMat4;
    private javax.swing.JTextField jTextFieldClassMat5;
    private javax.swing.JTextField jTextFieldClassMat6;
    private javax.swing.JTextField jTextFieldDimensions;
    // End of variables declaration//GEN-END:variables

	@Override
	public void run() {
		throw new UnsupportedOperationException("Not supported yet.");
	}
}
